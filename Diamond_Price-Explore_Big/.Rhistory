library(ggplot2)
data(diamonds)
ggplot(data = diamonds,
aes(x = carat, y = price)) +
geom_point() +
xlim(0, quantile(diamonds$carat, 0.99)) +
ylim(0, quantile(diamonds$price, .99))
ggplot(data = diamonds,
aes(x = carat, y = price)) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21) +
xlim(0, quantile(diamonds$carat, 0.99)) +
ylim(0, quantile(diamonds$price, .99))
ggplot(data = diamonds,
aes(x = carat, y = price)) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21) +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)))
ggplot(data = diamonds,
aes(x = carat, y = price)) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21) +
stat_smooth(method = 'lm')
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)))
ggplot(data = diamonds,
aes(x = carat, y = price)) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21) +
stat_smooth(method = 'lm') +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)))
library(GGally)
library(scales)
library(memisc)
install.packages("memisc")
library(memisc)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
library(lattice)
library(MASS)
library(car)
library(plyr)
library(reshape2)
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
library(dplyr)
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))),
axisLabels = 'internal')
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
library(gridExtra)
plot1 <- ggplot(data = diamonds,
aes(x = price)) +
geom_histogram() +
ggtitle('Price')
plot1
plot2 < - ggplot(data = diamonds,
aes(x = log10(price))) +
geom_histogram() +
ggtitle('Price (log10)')
plot2 < - ggplot(data = diamonds,
aes(x = log10(price))) +
geom_histogram() +
ggtitle('Price (log10)')
plot2 <- ggplot(data = diamonds,
aes(x = log10(price))) +
geom_histogram() +
ggtitle('Price (log10)')
grid.arrange(plot1,plot2, ncol = 1)
plot2 <- ggplot(data = diamonds,
aes(x = price)) +
geom_histogram(binwidth = 0.01,
fill = I('#F79420')) +
ggtitle('Price (log10)') +
scale_x_log10()
plot1 <- ggplot(data = diamonds,
aes(x = price)) +
geom_histogram(binwidth = 100,
fill = I('#099DD9')) +
ggtitle('Price')
grid.arrange(plot1,plot2, ncol = 1)
grid.arrange(plot1,plot2, ncol = 2)
ggplot(data = diamonds,
aes(x = carat, = carat)) +
ggplot(data = diamonds,
aes(x = carat, y = price)) +
scale_y_continuous(trans = log10_trans()) +
ggtitle('Price (log10) by Carat')
ggplot(data = diamonds,
aes(x = carat, y = price)) +
scale_y_continuous(trans = log10_trans()) +
ggtitle('Price (log10) by Carat')
cuberoot_trans = function() trans_new('cuberoot',
transoform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(data = diamonds,
aes(carat, price)) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(),
limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(),
limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(data = diamonds,
aes(carat, price)) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(),
limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(),
limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(data = diamonds,
aes(carat, price)) +
geom_point() +
scale_y_continuous(trans = log10_trans()) +
ggtitle('Price (log10) by Carat')
ggplot(data = diamonds,
aes(carat, price)) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(),
limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(),
limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$cart), decreasing = T))
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
ggplot(data = diamonds,
aes(carat, price)) +
geom_point(alpha = .5,
size = .75, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(data = diamonds,
aes(carat, price)) +
geom_point(alpha = .5,
size = .75, position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(),
limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(),
limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(data = diamons,
aes(x = carat, y = price)) +
geom_point(alpha = .5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = gide_legend(title = 'Clarity',
reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(),
limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(),
limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) vs \nCube Root of Carat and Clarity')
ggplot(data = diamonds,
aes(carat, price)) +
geom_point(alpha = 0.5,
size = 0.75,
position = 'jitter') +
scale_x_continuous(trans = cuberoot_trans(),
limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(),
limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(data = diamonds,
aes(x = carat, y = price)) +
geom_point(alpha = .5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = gide_legend(title = 'Clarity',
reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(),
limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(),
limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) vs \nCube Root of Carat and Clarity')
ggplot(data = diamonds,
aes(x = carat, y = price)) +
geom_point(alpha = .5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity',
reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(),
limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(),
limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) vs \nCube Root of Carat and Clarity')
ggplot(data = diamonds,
aes(x = carat, y = price)) +
geom_point(alpha = 0.5,
size = 1,
position = 'jitter',
aes(color = clarity)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity',
reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(),
limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(),
limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) vs \nCube Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color',
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(data = diamonds,
I(log(price)) ~ I(carat^(1/3)))
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
mtable(m1, m2, m3, m4, m5, sdigits = 3)
library(RCurl)
library(bitops)
library(RCurl)
diamonds_big <- read.csv("diamondsbig.csv")
names(diamonds_big)
names(diamonds_big)
m1 <- lm(data = diamonds,
I(log(price)) ~ I(carat^(1/3)))
m2 <- update(m1, ~ . + x)
m3 <- update(m2, ~ . + y)
m4 <- update(m3, ~ . + z)
m5 <- update(m4, ~ . + depth)
mtable(m1, m2, m3, m4, m5, sdigits = 3)
m1 <- lm(data = diamonds_big,
I(log(price)) ~ I(carat^(1/3)))
m2 <- update(m1, ~ . + x)
m3 <- update(m2, ~ . + y)
m4 <- update(m3, ~ . + z)
m5 <- update(m4, ~ . + depth)
mtable(m1, m2, m3, m4, m5, sdigits = 3)
diamonds_big$logprice = log(diamonds_big$price)
diamonds_big$logprice = log(diamonds_big$price)
m1 <- lm(data = diamonds_big[diamonds_big$price < 10000 &
diamonds_big$cert == "GIA",],
I(logprice ~ I(carat^(1/3))))
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5, sdigits = 3)
thisDiamond = data.frame(carat = 1.00,
cut = "V.Good",
color = "I",
clarity="VS1")
modelEstimate = predict(m5,
newdata = ThisDiamond,
interval = 'prediction',
level = .95)
thisDiamond = data.frame(carat = 1.00,
cut = "V.Good",
color = "I",
clarity="VS1")
modelEstimate = predict(m5,
newdata = thisDiamond,
interval = 'prediction',
level = .95)
modelEstimate
exp(modelEstimate)
library(knitr)
knitr::opts_chunk$set(echo=FALSE, warning=FALSE, message=FALSE)
diamonds_big <- read.csv("diamondsbig.csv")
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
library(lattice)
library(MASS)
library(car)
library(reshape2)
library(dplyr)
library(gridExtra)
library(RColorBrewer)
library(bitops)
library(RCurl)
library(knitr)
data(diamonds)
ggplot(data = diamonds,
aes(x = carat, y = price)) +
geom_point(fill = I('#F79420'), color = I('black'), shape = 21) +
stat_smooth(method = 'lm') +
scale_x_continuous(lim = c(0, quantile(diamonds$carat, 0.99))) +
scale_y_continuous(lim = c(0, quantile(diamonds$price, 0.99)))
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price),
10000), ]
ggpairs(diamond_samp,
lower = list(continuous = wrap("points", shape = I('.'))),
upper = list(combo = wrap("box", outlier.shape = I('.'))))
plot1 <- ggplot(data = diamonds,
aes(x = price)) +
geom_histogram(binwidth = 100,
fill = I('#099DD9')) +
ggtitle('Price')
plot2 <- ggplot(data = diamonds,
aes(x = price)) +
geom_histogram(binwidth = 0.01,
fill = I('#F79420')) +
ggtitle('Price (log10)') +
scale_x_log10()
grid.arrange(plot1,plot2, ncol = 2)
ggplot(data = diamonds,
aes(carat, price)) +
geom_point() +
scale_y_continuous(trans = log10_trans()) +
ggtitle('Price (log10) by Carat')
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(data = diamonds,
aes(carat, price)) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(),
limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(),
limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
head(sort(table(diamonds$carat), decreasing = T))
head(sort(table(diamonds$price), decreasing = T))
ggplot(data = diamonds,
aes(x = carat, y = price)) +
geom_point(alpha = 0.5,
size = 1,
position = 'jitter',
aes(color = clarity)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity',
reverse = TRUE,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(),
limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(),
limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) vs \nCube Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Color',
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
m1 <- lm(data = diamonds,
I(log(price)) ~ I(carat^(1/3)))
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5, sdigits = 3)
names(diamonds_big)
diamonds_big$logprice = log(diamonds_big$price)
m1 <- lm(data = diamonds_big[diamonds_big$price < 10000 &
diamonds_big$cert == "GIA",],
I(logprice ~ I(carat^(1/3))))
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5, sdigits = 3)
thisDiamond = data.frame(carat = 1.00,
cut = "V.Good",
color = "I",
clarity="VS1")
modelEstimate = predict(m5,
newdata = thisDiamond,
interval = 'prediction',
level = .95)
exp(modelEstimate)
